function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
import{p as N,q as w,_ as b}from"./q-B18e1AFI.js";import{g as V}from"./q-IkB594pC.js";const ae=N(w(()=>b(()=>import("./q-BxItPH4X.js"),__vite__mapDeps([])),"s_qVqzm1QnNRM"));var d={exports:{}};const O={},T=Object.freeze(Object.defineProperty({__proto__:null,default:O},Symbol.toStringTag,{value:"Module"})),g=V(T),I="dotenv",$="16.4.5",x="Loads environment variables from .env file",A="lib/main.js",k="lib/main.d.ts",j={".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},R={"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},K={type:"git",url:"git://github.com/motdotla/dotenv.git"},L="https://dotenvx.com",Y=["dotenv","env",".env","environment","variables","config","settings"],M="README.md",P="BSD-2-Clause",S={"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3",decache:"^4.6.1",sinon:"^14.0.1",standard:"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0",tap:"^16.3.0",tar:"^6.1.11",typescript:"^4.8.4"},B={node:">=12"},F={fs:!1},U={name:I,version:$,description:x,main:A,types:k,exports:j,scripts:R,repository:K,funding:L,keywords:Y,readmeFilename:M,license:P,devDependencies:S,engines:B,browser:F};var p={};const _=g,E=g,C=g,q=g,W=U,m=W.version,Q=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function G(e){const n={};let r=e.toString();r=r.replace(/\r\n?/mg,`
`);let s;for(;(s=Q.exec(r))!=null;){const i=s[1];let t=s[2]||"";t=t.trim();const o=t[0];t=t.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),o==='"'&&(t=t.replace(/\\n/g,`
`),t=t.replace(/\\r/g,"\r")),n[i]=t}return n}function J(e){const n=D(e),r=c.configDotenv({path:n});if(!r.parsed){const o=new Error(`MISSING_DATA: Cannot parse ${n} for an unknown reason`);throw o.code="MISSING_DATA",o}const s=y(e).split(","),i=s.length;let t;for(let o=0;o<i;o++)try{const a=s[o].trim(),l=X(r,a);t=c.decrypt(l.ciphertext,l.key);break}catch(a){if(o+1>=i)throw a}return c.parse(t)}function z(e){console.log(`[dotenv@${m}][INFO] ${e}`)}function H(e){console.log(`[dotenv@${m}][WARN] ${e}`)}function v(e){console.log(`[dotenv@${m}][DEBUG] ${e}`)}function y(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:p.DOTENV_KEY&&p.DOTENV_KEY.length>0?p.DOTENV_KEY:""}function X(e,n){let r;try{r=new URL(n)}catch(a){if(a.code==="ERR_INVALID_URL"){const l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw a}const s=r.password;if(!s){const a=new Error("INVALID_DOTENV_KEY: Missing key part");throw a.code="INVALID_DOTENV_KEY",a}const i=r.searchParams.get("environment");if(!i){const a=new Error("INVALID_DOTENV_KEY: Missing environment part");throw a.code="INVALID_DOTENV_KEY",a}const t=`DOTENV_VAULT_${i.toUpperCase()}`,o=e.parsed[t];if(!o){const a=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${t} in your .env.vault file.`);throw a.code="NOT_FOUND_DOTENV_ENVIRONMENT",a}return{ciphertext:o,key:s}}function D(e){let n=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const r of e.path)_.existsSync(r)&&(n=r.endsWith(".vault")?r:`${r}.vault`);else n=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else n=E.resolve(process.cwd(),".env.vault");return _.existsSync(n)?n:null}function h(e){return e[0]==="~"?E.join(C.homedir(),e.slice(1)):e}function Z(e){z("Loading env from encrypted .env.vault");const n=c._parseVault(e);let r=p;return e&&e.processEnv!=null&&(r=e.processEnv),c.populate(r,n,e),{parsed:n}}function ee(e){const n=E.resolve(process.cwd(),".env");let r="utf8";const s=!!(e&&e.debug);e&&e.encoding?r=e.encoding:s&&v("No encoding is specified. UTF-8 is used by default");let i=[n];if(e&&e.path)if(!Array.isArray(e.path))i=[h(e.path)];else{i=[];for(const l of e.path)i.push(h(l))}let t;const o={};for(const l of i)try{const u=c.parse(_.readFileSync(l,{encoding:r}));c.populate(o,u,e)}catch(u){s&&v(`Failed to load ${l} ${u.message}`),t=u}let a=p;return e&&e.processEnv!=null&&(a=e.processEnv),c.populate(a,o,e),t?{parsed:o,error:t}:{parsed:o}}function te(e){if(y(e).length===0)return c.configDotenv(e);const n=D(e);return n?c._configVault(e):(H(`You set DOTENV_KEY but you are missing a .env.vault file at ${n}. Did you forget to build it?`),c.configDotenv(e))}function ne(e,n){const r=Buffer.from(n.slice(-64),"hex");let s=Buffer.from(e,"base64");const i=s.subarray(0,12),t=s.subarray(-16);s=s.subarray(12,-16);try{const o=q.createDecipheriv("aes-256-gcm",r,i);return o.setAuthTag(t),`${o.update(s)}${o.final()}`}catch(o){const a=o instanceof RangeError,l=o.message==="Invalid key length",u=o.message==="Unsupported state or unable to authenticate data";if(a||l){const f=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw f.code="INVALID_DOTENV_KEY",f}else if(u){const f=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw f.code="DECRYPTION_FAILED",f}else throw o}}function re(e,n,r={}){const s=!!(r&&r.debug),i=!!(r&&r.override);if(typeof n!="object"){const t=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw t.code="OBJECT_REQUIRED",t}for(const t of Object.keys(n))Object.prototype.hasOwnProperty.call(e,t)?(i===!0&&(e[t]=n[t]),s&&v(i===!0?`"${t}" is already defined and WAS overwritten`:`"${t}" is already defined and was NOT overwritten`)):e[t]=n[t]}const c={configDotenv:ee,_configVault:Z,_parseVault:J,config:te,decrypt:ne,parse:G,populate:re};d.exports.configDotenv=c.configDotenv;d.exports._configVault=c._configVault;d.exports._parseVault=c._parseVault;d.exports.config=c.config;d.exports.decrypt=c.decrypt;d.exports.parse=c.parse;d.exports.populate=c.populate;d.exports=c;const ce=e=>!!new RegExp(/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/).test(e);export{ae as M,ce as v};
